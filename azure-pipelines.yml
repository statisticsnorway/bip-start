name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

# This pipeline is inspired by the template 
# https://github.com/statisticsnorway/azure-pipelines-templates/blob/master/javascript/react-complete-build.yml

trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: appName
    value: 'bip-start'
  - name: imageTag
    value: '$(Build.SourceBranchName)-$(Build.SourceVersion)'
  - name: teamname
    value: 'stratus'
  - name: sonarQubeServiceConnection
    value: 'bipSonarQube'
  - name: gcrServiceConnection
    value: 'gcrServiceConnection'

jobs:
  - job: pullRequestOrMaster
    displayName: 'Test, build, report test coverage, build & push Docker image, scan for vulns & retag image'
    steps:
      - script: |
          set -e
          yarn
          CI=true yarn coverage
          CI=true yarn build
        displayName: 'Tests and build'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage results'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'bipSonarCloud'
          organization: 'statisticsnorway'
          scannerMode: 'CLI'
          configMode: 'file'
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'
      - task: Docker@2
        displayName: 'Docker Build'
        inputs:
          repository: 'eu.gcr.io/prod-bip/ssb/$(teamname)/$(appName)'
          command: 'build'
          Dockerfile: 'Dockerfile'
          tags: 'imagescan-$(imageTag)'
      - task: Docker@2
        displayName: 'Docker Login'
        inputs:
          command: 'login'
          containerRegistry: '$(gcrServiceConnection)'
      - task: Docker@2
        displayName: 'Docker Push'
        inputs:
          repository: 'prod-bip/ssb/$(teamname)/$(appName)'
          command: 'push'
          containerRegistry: '$(gcrServiceConnection)'
          tags: 'imagescan-$(imageTag)'
      - task: DownloadSecureFile@1
        displayName: 'Download GCR key'
        name: gcrJsonKey
        inputs:
          secureFile: 'gcr-key.json'
      - script: |
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(gcrJsonKey.secureFilePath)"
        displayName: 'Set GCR Key'
      - task: gcr-vulneralbility-check@1
        displayName: 'GCR image vuln check'
        inputs:
          projectId: 'prod-bip'
          imageHost: 'https://eu.gcr.io/'
          image: 'prod-bip/ssb/$(teamname)/$(appName)'
          imageTag: 'imagescan-$(imageTag)'
          timeBetweenRetries: '10000'
      - script: |
          set -e
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin https://eu.gcr.io/
          docker tag eu.gcr.io/prod-bip/ssb/$(teamname)/$(appName):imagescan-$(imageTag) eu.gcr.io/prod-bip/ssb/$(teamname)/$(appName):$(imageTag)
          docker tag eu.gcr.io/prod-bip/ssb/$(teamname)/$(appName):imagescan-$(imageTag) eu.gcr.io/prod-bip/ssb/$(teamname)/$(appName):latest
          docker push -a eu.gcr.io/prod-bip/ssb/$(teamname)/$(appName)
        displayName: 'Retag image after vuln check'
        condition: succeeded()
